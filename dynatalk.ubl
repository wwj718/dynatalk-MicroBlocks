module dynatalk Comm
author wwj718
version 0 6 
depends MQTT 
description ''
variables event _mqtt_conf 

  spec ' ' 'start' 'start and loop'
  spec ' ' 'set mqtt broker' 'set mqtt broker _ buffer sizes _ username _ password _' 'auto auto auto auto' '192.168.1.3' 512 'guest' 'test'
  spec ' ' '_MessageLoop' '_MessageLoop'
  spec 'r' 'request' 'request _ action _ args _ timeout _ ms' 'auto auto auto auto' 'PyDemoAgent' 'echo' '["hi"]' 3000
  spec ' ' 'sendTo' 'sendTo _ action _ args _' 'auto auto auto' 'PyDemoAgent' 'echo' '["hi"]'
  spec ' ' 'broadcast' 'broadcast _ args _' 'auto auto' 'echo' '["hi"]'
  spec 'r' 'functions' 'actions'
  spec ' ' '_interpret' '_interpret _' 'auto' 'aMessage'
  spec ' ' '_send' '_send _' 'auto' 'aMessage'
  spec ' ' 'respondWith' 'respondWith _' 'auto' 'aNumberOrAString'
  spec ' ' 'raiseWith' 'raiseWith _' 'auto' 'aString'
  spec 'r' '_generateMessage' '_generateMessage parentID _ to _ actionName _ actionArgs _' 'auto auto auto auto' '' 'User' 'aString' '{"value":10}'
  spec ' ' '_mock' '_mock'
  spec ' ' '_process_promises' '_process_promises _' 'auto' 'aMessage'
  spec ' ' '_debugLog' '_debugLog _' 'auto' 'aString'
  spec 'r' '_debugging' '_debugging'
  spec ' ' '_ping' '_ping'
  spec ' ' 'help' 'help'
  spec 'r' 'agentName' 'agentName'

to '_MessageLoop' {
  comment 'receive mqtt message'
  forever {
    waitMillis 50
    if ('MQTT connected') {
      event = ('[net:MQTTLastEvent]')
      if (isType event 'list') {
        if ('_debugging') {sayIt 'topic' ('MQTT event topic' event) ', payload' ('MQTT event payload' event)}
        if (('[data:find]' ('[misc:jsonGet]' ('MQTT event payload' event) 'to') ('[data:makeList]' '[broadcast]' ('agentName'))) != -1) {'_interpret' ('MQTT event payload' event)}
      }
    } else {
      sayIt 'connect to mqtt broker ...'
      waitMillis 500
      comment '2. connect MQTT broker'
      if (_mqtt_conf == 0) {
        sayIt 'Please set mqtt'
        stopTask
      } else {
        'MQTT connect to' (at 1 _mqtt_conf) (at 2 _mqtt_conf) ('[data:join]' 'MicroBlocksClient-' (random 1 100000000)) (at 3 _mqtt_conf) (at 4 _mqtt_conf)
        comment 'subscribe topic: MicroBlocksAgent'
        waitMillis 500
        'MQTT sub' ('agentName')
        'MQTT sub' '[broadcast]'
      }
    }
  }
}

to 'agentName' {
  return 'MicroBlocksAgent'
}

to '_debugLog' aString {
  if ('_debugging') {'[data:addLast]' aString _debuglog}
}

to '_debugging' {
  return (booleanConstant false)
}

to '_generateMessage' parentID to actionName actionArgs {
  return ('[data:join]' '{"meta": {"id": "' ('agentName') '-' (random 0 100000000) '"' (ifExpression (parentID == '') '' ('[data:join]' ',"parent_id":"' parentID '"')) '},"to": "' to '","action": {"name": "' actionName '","args":' actionArgs '},"from": "' ('agentName') '"}')
}

to '_interpret' aMessage {
  comment '{
  "meta": {
    "id": "817411a0-cdd3-4372-a8d5-361e17440301"
  },
  "from": "User",
  "to": "MicroBlocksAgent",
  "action": {
    "name": "echo",
    "args": ["hi"]
  }
}'
  _currentMessage = aMessage
  local 'action' ('[misc:jsonGet]' aMessage 'action.name')
  local 'args' ('[data:makeList]')
  comment 'Convert json list to microblocks list'
  for i ('[misc:jsonCount]' ('[misc:jsonGet]' aMessage 'action.args') '') {
    '[data:addLast]' ('[misc:jsonGet]' ('[misc:jsonGet]' aMessage 'action.args') ('[data:convertType]' i 'string')) args
  }
  if (action == '[response]') {
    '_process_promises' aMessage
  } (action == '[error]') {
    '_process_promises' aMessage
  } (or (('[data:find]' action (functions)) != -1) (('[data:find]' action ('[data:makeList]' '_ping' 'help')) != -1)) {
    callCustomCommand action args
  } else {
    raiseWith ('[data:join]' 'Message Not Understood: ' 'MicroBlocksAgent' '>>' action)
  }
}

to '_mock' {
  '_interpret' '{
  "meta": {
    "id": "817411a0-cdd3-4372-a8d5-361e17440301"
  },
  "from": "User",
  "to": "MicroBlocksAgent",
  "action": {
    "name": "echo",
    "args": ["hi"]
  }
}'
}

to '_ping' {
  respondWith 'pong'
}

to '_process_promises' aMessage {
  local 'action' ('[misc:jsonGet]' aMessage 'action.name')
  local 'parentID' ('[misc:jsonGet]' aMessage 'meta.parent_id')
  '_debugLog' parentID
  for fakePromise _fakePromises {
    if (parentID == (at 1 fakePromise)) {
      if (action == '[response]') {
        atPut 2 fakePromise '[response]'
        atPut 3 fakePromise ('[misc:jsonGet]' aMessage 'action.args.value')
      }
      if (action == '[error]') {
        atPut 2 fakePromise '[error]'
        atPut 3 fakePromise ('[misc:jsonGet]' aMessage 'action.args.error')
      }
    }
  }
}

to '_send' aMessage {
  if ('_debugging') {sayIt 'send:' aMessage ' to ' ('[misc:jsonGet]' aMessage 'to')}
  if ('MQTT connected') {'MQTT pub' ('[misc:jsonGet]' aMessage 'to') aMessage}
}

to broadcast actionName args {
  sendTo '[broadcast]' actionName args
}

to functions {
  comment 'Exposed functions'
  return ('[data:makeList]' 'echo' 'add')
}

to help {
  local 'help' '{
  "echo": {
    "description": "echo the content",
    "args": ["aString"]
  },
  "add": {
    "description": "add a and b",
    "args": ["aNumber","aNumber"]
  }
}'
  respondWith ('[data:join]' '{"help":' help '}')
}

to raiseWith error {
  '_send' ('_generateMessage' ('[misc:jsonGet]' _currentMessage 'meta.id') ('[misc:jsonGet]' _currentMessage 'from') '[error]' ('[data:join]' '{"error": ' (ifExpression (isType error 'number') value ('[data:join]' '"' error '"')) '}'))
}

to request agent action args timeout {
  local 'message' ('_generateMessage' '' agent action args)
  local 'megID' ('[misc:jsonGet]' message 'meta.id')
  local 'fakePromise' ('[data:makeList]' megID '' '')
  '[data:addLast]' fakePromise _fakePromises
  '_send' message
  comment 'todo timeout'
  local 'begin' (millisOp)
  waitUntil (or ((at 2 fakePromise) != '') (((millisOp) - begin) > timeout))
  if ((at 2 fakePromise) == '[response]') {
    return (at 3 fakePromise)
  } ((at 2 fakePromise) == '[error]') {
    return ('[data:join]' 'error: ' (at 3 fakePromise))
  } else {
    return ('[data:join]' 'Timeout(' timeout ' ms)')
  }
}

to respondWith value {
  '_send' ('_generateMessage' ('[misc:jsonGet]' _currentMessage 'meta.id') ('[misc:jsonGet]' _currentMessage 'from') '[response]' ('[data:join]' '{"value":' (ifExpression (or (isType value 'number') (('[data:find]' '{' value) != -1)) value ('[data:join]' '"' value '"')) '}'))
}

to sendTo agent action args {
  '_send' ('_generateMessage' '' agent action args)
}

to 'set mqtt broker' broker size username password {
  _mqtt_conf = ('[data:makeList]' broker size username password)
}

to start {
  _debuglog = ('[data:makeList]')
  _fakePromises = ('[data:makeList]')
  '_MessageLoop'
}

